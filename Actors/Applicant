package Actors;

import java.util.ArrayList;
import java.util.List;

public class Applicant implements ApplicantRole {
	private String name;
    private String NRIC;
    private String password;
    private String maritalStatus;
    private int age;
    private String project;
    private String TypeFlat;
    private String appStatus;
    private boolean applied = false;
    private boolean WithdrawStatus = false;
    private List<String> enquiries = new ArrayList<>();
    
    public Applicant(String name, String NRIC, String password, String maritalStatus, int age, String TypeFlat, String appStatus) {
        this.name = name;
        this.NRIC = NRIC;
        this.age = age;
        this.password = "password";
        this.maritalStatus = maritalStatus;
        this.appStatus="Null";
        this.TypeFlat="Null";
        
    }

    public String getName() { 
    	return name; 
    }
    
    public String getNRIC() { 
    	return NRIC; 
    }
    
    public int getAge() { 
    	return age; 
    }
    
    public String getMaritalStatus() {
    	return maritalStatus; 
    }
    
    public String getTypeFlat() {
    	return TypeFlat;
    }
    
    public boolean isApplied() { 
    	return applied; 
    }
    
    
    public void setName(String name) { 
    	this.name = name; 
    }
    
    public void setNRIC(String NRIC) { 
    	this.NRIC = NRIC; 
    }
    
    public void setAge(int age) { 
    	this.age = age; 
    }
    
    public void setPassword(String newpassword) { 
    	this.password = newpassword; 
    }
    
    public void setMaritalStatus(String maritalStatus) { 
    	this.maritalStatus = maritalStatus; 
    }
    
   
    public void setApplied(boolean applied) { 
    	this.applied = applied; 
    }
    
   
    public void setProject(String project) { 
    	this.project = project; 
    }
    
    
    public void setTypeFlat(String typeFlat) { 
    	this.TypeFlat = typeFlat; 
    }
    
    public void setAppStatus(String appStatus) { 
    	this.appStatus = appStatus;
    }

    public void setWithdrawalStatus(boolean WithdrawStatus) {
    	this.WithdrawStatus = WithdrawStatus;
    }

 
    public List<Project> viewAvailProjects(boolean applied, Project project) {
        List<Project> allProjects = Project.getAllProjects();            // Fetches all projects
        List<Project> availableProjects = new ArrayList<>();
        
        if(this.applied) {
        	System.out.println("You have already applied for a project. No other projects available.");
        	return availableProjects;
    } 
        
        for (Project proj : allProjects) {
            if (!proj.isVisible()) continue; // Skip if project is not visible

            if (this.maritalStatus.equals("Single") && this.age >= 35) {
                if (proj.getTypeFlat().equals("2-Room")) {
                    availableProjects.add(proj);
                }
            } 
            else if (this.maritalStatus.equals("Married") && this.age >= 21) {
                if (proj.getTypeFlat().equals("2-Room") || proj.getTypeFlat().equals("3-Room")) {
                    availableProjects.add(proj);
                }
            }
        }

        return availableProjects;
    }

    
    public void applyProject(Project project, String chosenFlatType) {
    	if (this.applied) {
    		System.out.println("You have already applied for a project.");
            return;
    }
        if (project == null || chosenFlatType == null) {
            System.out.println("Invalid project or flat type.");
            return;
        }

        if (this.maritalStatus.equals("Single") && this.age >= 35) {
            if (!chosenFlatType.equals("2-Room")) {
                System.out.println("Singles (35+) can only apply for 2-Room flats.");
                return;
            }
        } 
        else if (this.maritalStatus.equals("Married") && this.age >= 21) {
            if (!chosenFlatType.equals("2-Room") && !chosenFlatType.equals("3-Room")) {
                System.out.println("Invalid flat type. Married applicants can apply for 2-Room or 3-Room flats.");
                return;
            }
        } 
        else {
            System.out.println(this.name + " is not eligible to apply for a project.");
            return;
        }

        // Assign project and flat type
        this.project = project.getName();
        this.TypeFlat = chosenFlatType;
        this.appStatus = "Pending";
        this.applied = true;

        System.out.println("You have successfully applied for the " + project.getName() + " project (" + this.TypeFlat + " flat).");
    }
        
    
    public String viewAppliedProject() {
        return applied ? project : "No project applied";
    }
    
    public String checkApplicationStatus() {
        return appStatus;
    }

    public void bookFlat(Officer officer) {
        if (this.appStatus.equals("Successful")) {
            officer.setbooked(this);
        }
        else {
        	System.out.println(this.name + " cannot book a flat. Application status is not 'Successful'.");
        }
        
    }

    
    public void withdrawApp(Manager manager) {
        if(this.applied==true && (this.appStatus.equals("Successful")||this.appStatus.equals("Booked"))) {
    	   if(this.WithdrawStatus == true){ 
    	        System.out.println(this.name + " has already requested a withdrawal.");
    	        return;
    	   }
    	   
    	   manager.handleAcceptWithdraw(this);
    	   System.out.println("Request to withdraw application sent.");
    }
    }

    
     
    public void submitEnquiry(String enquiry) {
        super.submitEnquiry(enquiry);                      
        System.out.println("Enquiry submitted: " + enquiry);
    }

    // View an applicant's specific enquiries based on their NRIC
    public void viewEnquiries() {
        super.viewEnquiries(this.NRIC);                   
    }

    // Edit an enquiry 
    public void editEnquiry(String newContent) {
        super.editEnquiry(newContent);                   
        System.out.println("Enquiry has been edited: " + newContent);
    }

     
    public void deleteEnquiry() {
        super.deleteEnquiry();                             
        System.out.println("Enquiry has been deleted.");
    }
}
